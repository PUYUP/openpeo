# Generated by Django 3.1 on 2020-08-18 02:26

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import utils.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='RoleCapabilities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('identifier', models.CharField(choices=[('registered', 'Registered'), ('client', 'Client'), ('expert', 'Expert')], max_length=255, validators=[django.core.validators.RegexValidator(message='Can only contain the letters a-z and underscores.', regex='^[a-zA-Z_][a-zA-Z_]*$'), utils.validators.non_python_keyword])),
                ('permissions', models.ManyToManyField(related_name='role_capabilities', related_query_name='role_capability', to='auth.Permission')),
            ],
            options={
                'verbose_name': 'Role Capability',
                'verbose_name_plural': 'Role Capabilities',
                'db_table': 'person_role_capabilities',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('identifier', models.CharField(choices=[('registered', 'Registered'), ('client', 'Client'), ('expert', 'Expert')], default='registered', max_length=255, validators=[django.core.validators.RegexValidator(message='Can only contain the letters a-z and underscores.', regex='^[a-zA-Z_][a-zA-Z_]*$'), utils.validators.non_python_keyword])),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', related_query_name='role', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'db_table': 'person_role',
                'ordering': ['-user__date_joined'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('headline', models.CharField(blank=True, max_length=255, null=True)),
                ('gender', models.CharField(blank=True, choices=[('unknown', 'Unknown'), ('male', 'Male'), ('female', 'Female')], default='unknown', max_length=255, null=True, validators=[django.core.validators.RegexValidator(message='Can only contain the letters a-z and underscores.', regex='^[a-zA-Z_][a-zA-Z_]*$'), utils.validators.non_python_keyword])),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('about', models.TextField(blank=True, null=True)),
                ('picture', models.ImageField(blank=True, max_length=500, null=True, upload_to='images/user')),
                ('picture_original', models.ImageField(blank=True, max_length=500, null=True, upload_to='images/user')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
                'db_table': 'person_profile',
                'ordering': ['-user__date_joined'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OTPFactory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('msisdn', models.CharField(blank=True, max_length=14, null=True)),
                ('token', models.CharField(max_length=64)),
                ('passcode', models.CharField(max_length=25)),
                ('valid_until', models.DateTimeField(blank=True, editable=False, null=True)),
                ('valid_until_timestamp', models.IntegerField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('is_used', models.BooleanField(default=False)),
                ('is_expired', models.BooleanField(default=False)),
                ('challenge', models.SlugField(choices=[('email_validation', 'Email Validation'), ('msisdn_validation', 'MSISDN Validation'), ('register_validation', 'Register Validation'), ('password_recovery', 'Password Recovery'), ('change_msisdn', 'Change MSISDN'), ('change_msisdn_validation', 'Change MSISDN Validation'), ('change_email', 'Change Email'), ('change_email_validation', 'Change Email Validation'), ('change_username', 'Change Username'), ('change_password', 'Change Password')], max_length=128, null=True, validators=[django.core.validators.RegexValidator(message="Code can only contain the letters a-z, A-Z, digits, and underscores, and can't start with a digit.", regex='^[a-zA-Z_][0-9a-zA-Z_]*$'), utils.validators.non_python_keyword])),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='otps', related_query_name='otp', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'OTP Factory',
                'verbose_name_plural': 'OTP Factories',
                'db_table': 'person_otp_factory',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('create_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('update_date', models.DateTimeField(auto_now=True, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('msisdn', models.CharField(blank=True, max_length=14, null=True)),
                ('email_verified', models.BooleanField(default=False, null=True)),
                ('msisdn_verified', models.BooleanField(default=False, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Accounts',
                'db_table': 'person_account',
                'ordering': ['-user__date_joined'],
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='rolecapabilities',
            constraint=models.UniqueConstraint(fields=('identifier',), name='unique_identifier_capability'),
        ),
    ]
